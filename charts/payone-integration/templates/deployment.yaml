apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  labels:
    app: {{ .Chart.Name }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
spec:
  replicas: {{ default 2 .Values.replicaCount }}
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
{{ toYaml .Values.rollingUpdateStrategy | indent 6 }}
  minReadySeconds: 5
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '{{ .Values.service.internalPort }}'
    spec:
      containers:
      - image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        name: {{ .Values.containerName }}
        ports:
        - name: {{ .Values.portName }}
          containerPort: {{ .Values.service.internalPort }}
        # Inject (non sensitive) environment variables from the `Values` config.
        env:
        {{- range $key, $val := .Values.nonSensitiveEnvs }}
        - name: {{ $key }}
          value: {{ $val | quote }}
        {{- end}}
        # Inject (sensitive) environment variables from `Values` config, referring
        # them from the related Secret object. This is an extra measure of security
        # to avoid having credentials displayed in plain text in the template file.
        # https://kubernetes.io/docs/concepts/configuration/secret/
        {{- $chartName := .Chart.Name -}}
        {{- range $key, $val := .Values.sensitiveEnvs }}
        - name: {{ $key }}
          valueFrom:
            secretKeyRef:
              name: {{ $chartName }}-secret
              key: {{ $key }}
        {{- end}}
        livenessProbe:
          httpGet:
            path: /health
            port: {{ .Values.portName }}
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /health
            port: {{ .Values.portName }}
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
        resources:
{{ toYaml .Values.resources | indent 10 }}
